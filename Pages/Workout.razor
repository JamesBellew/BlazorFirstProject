@page "/workout"
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage

<PageTitle>Workout</PageTitle>
<div class="container">
    <button @onclick="SaveWorkout">Save Workout</button>
    <button @onclick="LoadWorkout">Load Workout</button>
    <br>
    <br>

    <button class="btn btn-light border shadow mb-3" @onclick="ToggleNewWorkoutForm">
        @if (ShowNewWorkoutForm)
        {
              <span>Back to Saved Workouts</span>
        }
        else
        {
              <span>New Workout</span>
        }
    </button>

    @if (ShowNewWorkoutSavedAlert)
    {
            <div class="alert alert-info" role="alert">
                New workout saved :)
            </div>
    }
  
    @if (ShowNewWorkoutForm)
    {
            <div class="card" style="width: 22rem;">
                <div class="card-header">
                @if (NewWorkout.Count >= 1)
                {
                            <button class="btn btn-secondary me-2" @onclick="HandlerClearNewWorkout">Clear </button>
                }
                else
                {
                            <p class="text-primary font-bold capitalize">Select an exercise below haiii</p>
                }

                @if (NewWorkout.Count >= 1)
                {
                            <span>@NewWorkout.Count Exercises</span> 
                }
                @if (TotalNumberOfSetsInNewWorkout >= 1)
                {
                            <small class="ps-2 text-muted">(@TotalNumberOfSetsInNewWorkout Sets)</small>
                }
                </div>

                <ul class="list-group list-group-flush">
                @foreach (var workout in NewWorkout)
                {
                            <li class="list-group-item">
                                <button @onclick="()=>HandleRemoveWorkoutFromNewWorkout(workout)" class="btn btn-sm me-1 btn-secondary">X</button>
                                <small class="text-muted text-small">(@workout.Type)</small> @workout.Name @workout.Duration Sets 8-12
                            </li>
                }
                </ul>
                
            </div>
            <div class="flex-row mt-3">
                  <h1>All Workouts  <button @onclick="handleShowNewWorkoutForm" class="btn btn-primary ">Create your own</button></h1>
 
@if(ShowNewCustomWorkoutForm == true){
<form class="p2 text-center"
>
  <div class="form-group">
    <label for="exampleInputEmail1">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
    <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
  </div>
  <div class="form-group">
    <label for="exampleInputPassword1">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
  </div>
  <div class="form-group form-check">
    <input type="checkbox" class="form-check-input" id="exampleCheck1">
    <label class="form-check-label" for="exampleCheck1">Check me out</label>
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>
  <div class="form-group">
    <label for="formControlRange">Example Range input</label>
    <input type="range" class="form-control-range" id="formControlRange">
  </div>
</form>
<div class="form-check">
  <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1" checked>
  <label class="form-check-label" for="exampleRadios1">
    Default radio
  </label>
</div>
<div class="form-check">
  <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2">
  <label class="form-check-label" for="exampleRadios2">
    Second default radio
  </label>
</div>
<div class="form-check">
  <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios3" value="option3" disabled>
  <label class="form-check-label" for="exampleRadios3">
    Disabled radio
  </label>
</div>
}

  </div>

        @if (NewWorkout.Count >= 1)
        {
                    <button class="btn btn-primary my-1" @onclick="HandleSaveNewWorkout">Save Workout</button>
        }

            <br>
            <div class="btn-group mb-2 ms-0 w-full" role="group" aria-label="Basic example">
                <button type="button" class="btn mx-1 rounded btn-primary">All</button>
                <button type="button" class="btn mx-1 rounded btn-secondary">Chest</button>
                <button type="button" class="btn mx-1 rounded btn-secondary">Legs</button>
                <button type="button" class="btn mx-1 rounded btn-secondary">Arms</button>
            </div>

            <br>

            <div class="row">
            @for (int i = 0; i < workouts.Length; i++)
            {
                itemsLeft += 1;
                var currentWorkout = workouts[i];
                if (currentWorkout.InWorkout == false)
                {
                                <div class="col-lg-6 col-md-6 mb-4 cursor-pointer">
                                    <div class="card h-0">
                                        <div class="card-body">
                                            <div class="d-flex">
                                                <h5 class="card-title">@currentWorkout.Name</h5>
                                                <p class="mx-3 text-muted text-xs">
                                        @currentWorkout.Duration Sets X 8-12
                                                </p>
                                            </div>
                                            <p class="card-text bold">
                                    @currentWorkout.Desc
                                            </p>
                                            <a class="btn btn-secondary" @onclick="() => HandleAddToNewWorkout(currentWorkout)">
                                                Add to Workout
                                            </a>
                                        </div>
                                    </div>
                                </div>
                }
                else
                {
                    itemsLeft -= 1;
                }
            }
            </div>
    }
</div>
<div>

</div>
@code {
    private string message;

    // Save workouts to LocalStorage
    private async Task SaveWorkout()
    {
        await localStorage.SetItemAsync("savedWorkouts", NewWorkout);
        message = "Workouts saved to LocalStorage.";
        ShowNewWorkoutSavedAlert = true;
        StateHasChanged();
    }

    // Load workouts from LocalStorage
    private async Task LoadWorkout()
    {
        var savedWorkouts = await localStorage.GetItemAsync<List<WorkoutClass>>("savedWorkouts");

        if (savedWorkouts != null)
        {
            NewWorkout = savedWorkouts;
            message = $"Loaded {NewWorkout.Count} workout(s) from LocalStorage.";
        }
        else
        {
            message = "No workouts found in LocalStorage.";
        }

        ShowNewWorkoutForm = true;
        ShowNewWorkoutSavedAlert = false;
        StateHasChanged();
    }

    public int itemsLeft = 0;
    private bool ShowNewWorkoutForm;

    private int TotalNumberOfSetsInNewWorkout;

    private bool ShowNewWorkoutSavedAlert = false;
 private bool ShowNewCustomWorkoutForm =false;
    public async Task HandleSaveNewWorkout()
    {
        NewWorkout.Clear();
        ShowNewWorkoutSavedAlert = true;
        StateHasChanged();

        TotalNumberOfSetsInNewWorkout = 0;
        foreach (var workout in workouts)
        {
            workout.InWorkout = false;
        }

        StateHasChanged();
    }
 public void handleShowNewWorkoutForm(){
ShowNewCustomWorkoutForm =true;
 }
    public void HandleRemoveWorkoutFromNewWorkout(WorkoutClass workout)
    {
        NewWorkout.RemoveAll(w => w.Name == workout.Name && w.Duration == workout.Duration);

        var existingWorkout = workouts.FirstOrDefault(w => w.Name == workout.Name && w.Duration == workout.Duration);
        if (existingWorkout != null)
        {
            existingWorkout.InWorkout = false;
            TotalNumberOfSetsInNewWorkout -= existingWorkout.Duration;
        }
    }

    public void HandlerClearNewWorkout()
    {
        TotalNumberOfSetsInNewWorkout = 0;
        NewWorkout.Clear();

        foreach (var workout in workouts)
        {
            workout.InWorkout = false;
        }
    }

    private void HandleAddToNewWorkout(WorkoutClass workout)
    {
        TotalNumberOfSetsInNewWorkout += workout.Duration;
        workout.InWorkout = !workout.InWorkout;
        NewWorkout.Add(new WorkoutClass
            {
                Name = workout.Name,
                Duration = workout.Duration,
                Type = workout.Type,
                Desc = workout.Desc,
                InWorkout = true
            });
    }

    private void ToggleNewWorkoutForm()
    {
        ShowNewWorkoutForm = !ShowNewWorkoutForm;
    }

    public class WorkoutClass
    {
        public string Name { get; set; }
        public int Duration { get; set; }
        public string Type { get; set; }
        public string Desc { get; set; }
        public bool InWorkout { get; set; }
    }

    private List<WorkoutClass> NewWorkout = new List<WorkoutClass>();
    private List<WorkoutClass> SavedWorkouts = new List<WorkoutClass>();

    WorkoutClass[] workouts = new WorkoutClass[]
    {
        new WorkoutClass { Name = "Bench Press", Duration = 3, Type = "Chest", Desc = " Some quick example text to build on the card title and make up the bulk of the card's content.", InWorkout = false },
        new WorkoutClass { Name = "Chest Flys Incline", Duration = 4, Type = "Chest", Desc = " Some quick example text to build on the card title and make up the bulk of the card's content.", InWorkout = true },
        new WorkoutClass { Name = "Chest Dips", Duration = 4, Type = "Chest", Desc = " Some quick example text to build on the card title and make up the bulk of the card's content.", InWorkout = false },
        // Add more workouts as needed
    };
}
